{"version":3,"sources":["components/BackgroundImage/BackgroundImage.js","components/quote/Quote.js","containers/mainContainer/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["BackgroundImage","props","styles","backgroundImage","categories","console","log","className","style","Quote","quote","text","author","MainContainer","useState","setQuote","isLoadedQuotes","setIsLoadedQuotes","getQuotes","a","url","fetch","response","json","quotes","index","parseInt","Math","random","length","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6UAkBeA,G,MAdS,SAACC,GAGrB,IAAMC,EAAS,CACXC,gBAAgB,6CAAD,OAA+CF,EAAMG,WAArD,MAInB,OADAC,QAAQC,IAAIL,EAAMG,YAEd,yBAAKG,UAAU,kBAAkBC,MAAON,MCKjCO,G,MAdD,SAACR,GACX,OAAKA,EAAMS,MAKP,yBAAKH,UAAU,SACX,wBAAIA,UAAU,eAAeN,EAAMS,MAAMC,MACzC,gCAAYJ,UAAU,iBAAtB,KAAyCN,EAAMS,MAAME,SANjD,gCCiDDC,G,MAjDO,WAAO,IAAD,EAEEC,mBAAS,IAFX,mBAEjBJ,EAFiB,KAEVK,EAFU,OAGoBD,oBAAS,GAH7B,mBAGjBE,EAHiB,KAGDC,EAHC,KAKlBC,EAAS,uCAAG,kCAAAC,EAAA,6DACRC,EAAM,8BADE,kBAIaC,MAAMD,GAJnB,cAIJE,EAJI,gBAKWA,EAASC,OALpB,OAKJC,EALI,OAQJC,EAAOC,SAASC,KAAKC,SAAWR,EAAIS,QAC1CxB,QAAQC,IAAImB,GAGRD,GAAUA,EAAOK,OAAS,GAC1Bd,EAASS,EAAOC,IAGpBR,GAAkB,GAClBZ,QAAQC,IAAI,aAAckB,GAC1BnB,QAAQC,IAAI,mBAAoBI,GAlBtB,4GAAH,qDAwBfoB,qBAAU,WACDd,GACDE,MAEL,CAACH,IAOJ,OACI,yBAAKR,UAAU,iBACX,kBAAC,EAAD,CAAiBH,WAJP,CAAC,aAAa,QAAQ,SAKhC,kBAAC,EAAD,CAAOM,MAAOA,OCrCXqB,MARf,WACI,OACI,yBAAKxB,UAAU,OACX,kBAAC,EAAD,QCKQyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.e5e6d5fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './BackgroundImage.css';\r\n\r\n\r\nconst BackgroundImage = (props) => {\r\n    //TODO: Plese read the unsplash API\r\n   \r\n    const styles = {\r\n        backgroundImage: `url(https://source.unsplash.com/1600x800/?${props.categories})`\r\n    }\r\n    \r\n    console.log(props.categories)\r\n    return (\r\n        <div className=\"BackgroundImage\" style={styles}></div>\r\n    )\r\n};\r\n\r\n\r\nexport default BackgroundImage;","import React from 'react';\r\n\r\nimport './Quote.css';\r\n\r\nconst Quote = (props) => {\r\n    if (!props.quote) {\r\n        return (<div></div>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"Quote\">\r\n            <h2 className=\"Quote__text\">{props.quote.text}</h2>\r\n            <blockquote className=\"Quote__author\">- {props.quote.author}</blockquote>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default Quote;","import React, { useEffect, useState } from 'react';\r\nimport BackgroundImage from '../../components/BackgroundImage/BackgroundImage';\r\nimport Quote from '../../components/quote/Quote';\r\n\r\nimport './MainContainer.css';\r\n\r\nconst MainContainer = () => {\r\n\r\n    const [quote, setQuote] = useState('');\r\n    const [isLoadedQuotes, setIsLoadedQuotes] = useState(false);\r\n\r\n    const getQuotes = async () => {\r\n        const url = 'https://type.fit/api/quotes';\r\n        \r\n        try {\r\n            const response = await fetch(url);\r\n            const quotes = await response.json();\r\n\r\n            //TODO: Get the quotes lenth and generate a random index.\r\n            const index =parseInt(Math.random() * url.length);\r\n            console.log(index)\r\n\r\n\r\n            if (quotes && quotes.length > 0) {\r\n                setQuote(quotes[index]);\r\n            }\r\n\r\n            setIsLoadedQuotes(true);\r\n            console.log('Quotes => ', quotes);\r\n            console.log('Random Quote => ', quote);\r\n        } catch (error) {\r\n            debugger;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isLoadedQuotes) {\r\n            getQuotes();\r\n        }\r\n    }, [setQuote])\r\n\r\n    //TODO: Add to the BackgroundImage component a category attribute and then\r\n    // the BackgroundImage will render an image related to the category.\r\n    // e.g. technology, nature, people, etc...\r\n    const categories= ['technology','music','art']\r\n\r\n    return (\r\n        <div className=\"MainContainer\">\r\n            <BackgroundImage categories={categories}/>\r\n            <Quote quote={quote}/>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default MainContainer;","import React from 'react';\r\nimport './App.css';\r\nimport MainContainer from './containers/mainContainer/MainContainer';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <MainContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}